<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <link rel="stylesheet" href="../styles/nav_bar/navbar.css">
  <link rel="stylesheet" href="../styles/my_challenges.css">
  <link rel="stylesheet" href="../styles/background/background.css">
  <title>Defy | Challenges</title>
</head>
<body class="background-image">
  <% include partials/navbar %>

  <div class="challenges_content">
    <div class="map_wrapper">
      <div class="challenge_filter_wrapper">
        <span>Current ongoing and upcoming challenges in Vancouver sorted by</span>
        <input id="pac-input" class="challenge_filter" type="text" placeholder="Everything"/>
      </div>
      <div id="map"></div>
      <div id="infowindow-content">
        <span id="place-name" class="Title"></span><br>
        <span id="place-address"></span>
      </div>
    </div>
    <div class="challenges_wrapper">
      <div class="challenges">
        <div class="label"></div>
        <div class="image">
          <img src="../images/controller.png" />
        </div>
        <div class="content">
          <div class="metadata">
            <div class="title">Jenga</div>
            <div class="date">Sept 5 8:00pm</div>
          </div>
          <div class="abstract">The world's best Jenga player challenges you to a team battle.</div>
        </div>
        <div class="accept">
          <button>Accept</button>
        </div>
      </div>
    </div>
  </div>
  <script>

    let map;
    let bounds;

    function initMap() {
        map = new google.maps.Map(document.getElementById('map'), {
          center: {lat: -33.8688, lng: 151.2195},
          zoom: 13,
          styles: [
            {elementType: 'geometry', stylers: [{color: '#242f3e'}]},
            {elementType: 'labels.text.stroke', stylers: [{color: '#242f3e'}]},
            {elementType: 'labels.text.fill', stylers: [{color: '#746855'}]},
            {
              featureType: 'administrative.locality',
              elementType: 'labels.text.fill',
              stylers: [{color: '#d59563'}]
            },
            {
              featureType: 'poi',
              elementType: 'labels.text.fill',
              stylers: [{color: '#d59563'}]
            },
            {
              featureType: 'poi.park',
              elementType: 'geometry',
              stylers: [{color: '#263c3f'}]
            },
            {
              featureType: 'poi.park',
              elementType: 'labels.text.fill',
              stylers: [{color: '#6b9a76'}]
            },
            {
              featureType: 'road',
              elementType: 'geometry',
              stylers: [{color: '#38414e'}]
            },
            {
              featureType: 'road',
              elementType: 'geometry.stroke',
              stylers: [{color: '#212a37'}]
            },
            {
              featureType: 'road',
              elementType: 'labels.text.fill',
              stylers: [{color: '#9ca5b3'}]
            },
            {
              featureType: 'road.highway',
              elementType: 'geometry',
              stylers: [{color: '#746855'}]
            },
            {
              featureType: 'road.highway',
              elementType: 'geometry.stroke',
              stylers: [{color: '#1f2835'}]
            },
            {
              featureType: 'road.highway',
              elementType: 'labels.text.fill',
              stylers: [{color: '#f3d19c'}]
            },
            {
              featureType: 'transit',
              elementType: 'geometry',
              stylers: [{color: '#2f3948'}]
            },
            {
              featureType: 'transit.station',
              elementType: 'labels.text.fill',
              stylers: [{color: '#d59563'}]
            },
            {
              featureType: 'water',
              elementType: 'geometry',
              stylers: [{color: '#17263c'}]
            },
            {
              featureType: 'water',
              elementType: 'labels.text.fill',
              stylers: [{color: '#515c6d'}]
            },
            {
              featureType: 'water',
              elementType: 'labels.text.stroke',
              stylers: [{color: '#17263c'}]
            }
          ]
        });


        bounds = new google.maps.LatLngBounds();

        const arr = {
          // 'downtown': [49.2820, -123.1171],
          // 'coquitlam': [49.2838, -122.7932],
          'kitsilano': [49.2684, -123.1683]
        };

        for (var key in arr) {
          let data = arr[key];
          let marker = new google.maps.Marker({
            position: new google.maps.LatLng (data[0], data[1]),
            map: map,
            title: key
          });
          // bounds.extend(marker.position);
          map.panTo(marker.position); //-> use this one to show one marker at a time
        }
          // map.fitBounds(bounds); -> use this one to show more than one point
      }
        // var input = document.getElementById('pac-input');

        // var autocomplete = new google.maps.places.Autocomplete(input);

        // // Bind the map's bounds (viewport) property to the autocomplete object,
        // // so that the autocomplete requests use the current map bounds for the
        // // bounds option in the request.
        // autocomplete.bindTo('bounds', map);

        // // Set the data fields to return when the user selects a place.
        // autocomplete.setFields(
        //     ['address_components', 'geometry', 'icon', 'name']);

        // var infowindow = new google.maps.InfoWindow();
        // var infowindowContent = document.getElementById('infowindow-content');
        // infowindow.setContent(infowindowContent);
        // var marker = new google.maps.Marker({
        //   map: map,
        //   anchorPoint: new google.maps.Point(0, -29)
        // });

        // autocomplete.addListener('place_changed', function() {
        //   infowindow.close();
        //   marker.setVisible(false);
        //   var place = autocomplete.getPlace();
        //   if (!place.geometry) {
        //     // User entered the name of a Place that was not suggested and
        //     // pressed the Enter key, or the Place Details request failed.
        //     window.alert("No details available for input: '" + place.name + "'");
        //     return;
        //   }

        //   // If the place has a geometry, then present it on a map.
        //   if (place.geometry.viewport) {
        //     map.fitBounds(place.geometry.viewport);
        //   } else {
        //     map.setCenter(place.geometry.location);
        //     map.setZoom(17);  // Why 17? Because it looks good.
        //   }
        //   marker.setPosition(place.geometry.location);
        //   marker.setVisible(true);

        //   var address = '';
        //   if (place.address_components) {
        //     address = [
        //       (place.address_components[0] && place.address_components[0].short_name || ''),
        //       (place.address_components[1] && place.address_components[1].short_name || ''),
        //       (place.address_components[2] && place.address_components[2].short_name || '')
        //     ].join(' ');
        //   }

        //   infowindowContent.children['place-icon'].src = place.icon;
        //   infowindowContent.children['place-name'].textContent = place.name;
        //   infowindowContent.children['place-address'].textContent = address;
        //   infowindow.open(map, marker);
        // });
      }
  </script>
  <script src="https://maps.googleapis.com/maps/api/js?key=<%= API_KEY %>&libraries=places&callback=initMap" async defer></script>
</body>
</html>
